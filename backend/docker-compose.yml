services:
    db:
        image: postgres:14
        env_file:
            - ./.env
        environment:
            POSTGRES_DB: ${DB_NAME}
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            TZ: UTC
        volumes:
            - pgdata:/var/lib/postgresql/data
            - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
        healthcheck:
            test:
                ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
            interval: 5s
            timeout: 5s
            retries: 10
        ports:
            - "5432:5432"

    app:
        container_name: app
        build:
            context: .
            dockerfile: docker/app.Dockerfile
        env_file:
            - ./.env
        depends_on:
            db:
                condition: service_healthy
        volumes:
            - .:/app
        command: >
            bash -lc "python manage.py migrate --noinput &&
            python manage.py collectstatic --noinput &&
            python -m gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers ${GUNICORN_WORKERS:-3} --timeout ${GUNICORN_TIMEOUT:-60} --log-level debug"
        ports:
            - "8000:8000"
        healthcheck:
            test:
                - CMD-SHELL
                - |
                    python - <<'PY'
                    import urllib.request,sys
                    urllib.request.urlopen('http://localhost:8000/health/ready'); sys.exit(0)
                    PY
            interval: 10s
            timeout: 5s
            retries: 20

volumes:
    pgdata:
